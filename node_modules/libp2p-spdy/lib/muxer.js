'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events').EventEmitter;
var noop = require('lodash.noop');
var Connection = require('interface-connection').Connection;
var toPull = require('stream-to-pull-stream');

var SPDY_CODEC = require('./spdy-codec');

module.exports = function (_EventEmitter) {
  _inherits(Muxer, _EventEmitter);

  function Muxer(conn, spdy) {
    _classCallCheck(this, Muxer);

    var _this = _possibleConstructorReturn(this, (Muxer.__proto__ || Object.getPrototypeOf(Muxer)).call(this));

    _this.spdy = spdy;
    _this.conn = conn;
    _this.multicodec = SPDY_CODEC;

    spdy.start(3.1);

    // The rest of the API comes by default with SPDY
    spdy.on('close', function () {
      _this.emit('close');
    });

    spdy.on('error', function (err) {
      _this.emit('error', err);
    });

    // needed by other spdy impl that need the response headers
    // in order to confirm the stream can be open
    spdy.on('stream', function (stream) {
      stream.respond(200, {});
      var muxedConn = new Connection(toPull.duplex(stream), _this.conn);
      _this.emit('stream', muxedConn);
    });
    return _this;
  }

  // method added to enable pure stream muxer feeling


  _createClass(Muxer, [{
    key: 'newStream',
    value: function newStream(callback) {
      var _this2 = this;

      if (!callback) {
        callback = noop;
      }
      var conn = new Connection(null, this.conn);

      this.spdy.request({
        method: 'POST',
        path: '/',
        headers: {}
      }, function (err, stream) {
        conn.setInnerConn(toPull.duplex(stream), _this2.conn);

        callback(err, conn);
      });

      return conn;
    }
  }, {
    key: 'end',
    value: function end(cb) {
      this.spdy.end(cb);
    }
  }]);

  return Muxer;
}(EventEmitter);