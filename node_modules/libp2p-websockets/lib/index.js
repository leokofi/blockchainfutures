'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var connect = require('pull-ws/client');
var mafmt = require('mafmt');
var contains = require('lodash.contains');
var Connection = require('interface-connection').Connection;
var debug = require('debug');
var log = debug('libp2p:websockets:dialer');

var _createListener = require('./listener');

module.exports = function () {
  function WebSockets() {
    _classCallCheck(this, WebSockets);
  }

  _createClass(WebSockets, [{
    key: 'dial',
    value: function dial(ma, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!callback) {
        callback = function callback() {};
      }

      var maOpts = ma.toOptions();

      var url = 'ws://' + maOpts.host + ':' + maOpts.port;
      log('dialing %s', url);
      var socket = connect(url, {
        binary: true,
        onConnect: callback
      });

      var conn = new Connection(socket);
      conn.getObservedAddrs = function (cb) {
        return cb(null, [ma]);
      };
      conn.close = function (cb) {
        return socket.close(cb);
      };

      return conn;
    }
  }, {
    key: 'createListener',
    value: function createListener(options, handler) {
      if (typeof options === 'function') {
        handler = options;
        options = {};
      }

      return _createListener(options, handler);
    }
  }, {
    key: 'filter',
    value: function filter(multiaddrs) {
      if (!Array.isArray(multiaddrs)) {
        multiaddrs = [multiaddrs];
      }

      return multiaddrs.filter(function (ma) {
        if (contains(ma.protoNames(), 'ipfs')) {
          ma = ma.decapsulate('ipfs');
        }
        return mafmt.WebSockets.matches(ma);
      });
    }
  }]);

  return WebSockets;
}();