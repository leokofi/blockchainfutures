'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parallelLimit = require('run-parallel-limit');
var pull = require('pull-stream');

// BlockService is a hybrid block datastore. It stores data in a local
// datastore and may retrieve data from a remote Exchange.
// It uses an internal `datastore.Datastore` instance to store values.
module.exports = function () {
  function BlockService(ipfsRepo) {
    _classCallCheck(this, BlockService);

    this._repo = ipfsRepo;
    this._bitswap = null;
  }

  _createClass(BlockService, [{
    key: 'goOnline',
    value: function goOnline(bitswap) {
      this._bitswap = bitswap;
    }
  }, {
    key: 'goOffline',
    value: function goOffline() {
      this._bitswap = null;
    }
  }, {
    key: 'isOnline',
    value: function isOnline() {
      return this._bitswap != null;
    }
  }, {
    key: 'put',
    value: function put(block, callback) {
      callback = callback || function () {};
      if (!block) {
        return callback(new Error('Missing block'));
      }

      pull(pull.values([block]), this.putStream(), pull.onEnd(callback));
    }
  }, {
    key: 'putStream',
    value: function putStream() {
      if (this.isOnline()) {
        return this._bitswap.putStream();
      }

      return this._repo.blockstore.putStream();
    }
  }, {
    key: 'get',
    value: function get(key, extension, callback) {
      if (typeof extension === 'function') {
        callback = extension;
        extension = undefined;
      }

      pull(this.getStream(key, extension), pull.collect(function (err, result) {
        if (err) return callback(err);
        callback(null, result[0]);
      }));
    }
  }, {
    key: 'getStream',
    value: function getStream(key, extension) {
      if (this.isOnline()) {
        return this._bitswap.getStream(key);
      }

      return this._repo.blockstore.getStream(key, extension);
    }
  }, {
    key: 'delete',
    value: function _delete(keys, extension, callback) {
      var _this = this;

      if (typeof extension === 'function') {
        callback = extension;
        extension = undefined;
      }

      if (!Array.isArray(keys)) {
        keys = [keys];
      }

      parallelLimit(keys.map(function (key) {
        return function (next) {
          _this._repo.blockstore.delete(key, extension, next);
        };
      }), 100, callback);
    }
  }]);

  return BlockService;
}();