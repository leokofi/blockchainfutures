'use strict';

var PeerInfo = require('peer-info');
var PeerId = require('peer-id');
var multiaddr = require('multiaddr');
var pull = require('pull-stream');
var lp = require('pull-length-prefixed');

var msg = require('./message');

module.exports = function (conn, callback) {
  pull(conn, lp.decode(), pull.take(1), pull.collect(function (err, data) {
    if (err) {
      return callback(err);
    }

    var input = msg.decode(data[0]);

    var id = PeerId.createFromPubKey(input.publicKey);
    var info = new PeerInfo(id);
    input.listenAddrs.map(multiaddr).forEach(function (ma) {
      return info.multiaddr.add(ma);
    });

    callback(null, info, getObservedAddrs(input));
  }));
};

function getObservedAddrs(input) {
  if (!hasObservedAddr(input)) {
    return [];
  }

  var addrs = input.observedAddr;

  if (!Array.isArray(input.observedAddr)) {
    addrs = [addrs];
  }

  return addrs.map(function (oa) {
    return multiaddr(oa);
  });
}

function hasObservedAddr(input) {
  return input.observedAddr && input.observedAddr.length > 0;
}