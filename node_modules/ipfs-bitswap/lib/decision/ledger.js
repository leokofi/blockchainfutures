'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Wantlist = require('../wantlist');

module.exports = function () {
  function Ledger(peerId) {
    _classCallCheck(this, Ledger);

    this.partner = peerId;
    this.wantlist = new Wantlist();

    this.exchangeCount = 0;
    this.sentToPeer = new Map();

    this.accounting = {
      bytesSent: 0,
      bytesRecv: 0
    };
  }

  _createClass(Ledger, [{
    key: 'sentBytes',
    value: function sentBytes(n) {
      this.exchangeCount++;
      this.lastExchange = new Date().getTime();
      this.accounting.bytesSent += n;
    }
  }, {
    key: 'receivedBytes',
    value: function receivedBytes(n) {
      this.exchangeCount++;
      this.lastExchange = new Date().getTime();
      this.accounting.bytesRecv += n;
    }
  }, {
    key: 'wants',
    value: function wants(key, priority) {
      this.wantlist.add(key, priority);
    }
  }, {
    key: 'cancelWant',
    value: function cancelWant(key) {
      this.wantlist.remove(key);
    }
  }, {
    key: 'wantlistContains',
    value: function wantlistContains(key) {
      return this.wantlist.contains(key);
    }
  }]);

  return Ledger;
}();