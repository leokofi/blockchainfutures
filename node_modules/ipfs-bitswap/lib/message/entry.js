'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mh = require('multihashes');

var WantlistEntry = require('../wantlist').Entry;

module.exports = function () {
  function BitswapMessageEntry(key, priority, cancel) {
    _classCallCheck(this, BitswapMessageEntry);

    this.entry = new WantlistEntry(key, priority);
    this.cancel = Boolean(cancel);
  }

  _createClass(BitswapMessageEntry, [{
    key: 'equals',
    value: function equals(other) {
      return this.cancel === other.cancel && this.entry.equals(other.entry);
    }
  }, {
    key: 'key',
    get: function get() {
      return this.entry.key;
    },
    set: function set(val) {
      this.entry.key = val;
    }
  }, {
    key: 'priority',
    get: function get() {
      return this.entry.priority;
    },
    set: function set(val) {
      this.entry.priority = val;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'BitswapMessageEntry ' + mh.toB58String(this.key) + ' <cancel: ' + this.cancel + ', priority: ' + this.priority + '>';
    }
  }]);

  return BitswapMessageEntry;
}();