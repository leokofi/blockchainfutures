'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var assert = require('assert');
var isUndefined = require('lodash.isundefined');
var mh = require('multihashes');

module.exports = function () {
  function WantlistEntry(key, priority) {
    _classCallCheck(this, WantlistEntry);

    assert(Buffer.isBuffer(key), 'key must be a buffer');
    // Keep track of how many requests we have for this key
    this._refCounter = 1;

    this.key = key;
    this.priority = isUndefined(priority) ? 1 : priority;
  }

  _createClass(WantlistEntry, [{
    key: 'inc',
    value: function inc() {
      this._refCounter += 1;
    }
  }, {
    key: 'dec',
    value: function dec() {
      this._refCounter = Math.max(0, this._refCounter - 1);
    }
  }, {
    key: 'hasRefs',
    value: function hasRefs() {
      return this._refCounter > 0;
    }
  }, {
    key: 'equals',
    value: function equals(other) {
      return this._refCounter === other._refCounter && this.key.equals(other.key) && this.priority === other.priority;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'WantlistEntry <key: ' + mh.toB58String(this.key) + ', priority: ' + this.priority + ', refs: ' + this._refCounter + '>';
    }
  }]);

  return WantlistEntry;
}();