'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mh = require('multihashes');

var Entry = require('./entry');

var Wantlist = function () {
  function Wantlist() {
    _classCallCheck(this, Wantlist);

    this.set = new Map();
  }

  _createClass(Wantlist, [{
    key: 'add',
    value: function add(key, priority) {
      var e = this.set.get(mh.toB58String(key));

      if (e) {
        e.inc();
        e.priority = priority;
      } else {
        this.set.set(mh.toB58String(key), new Entry(key, priority));
      }
    }
  }, {
    key: 'remove',
    value: function remove(key) {
      var e = this.set.get(mh.toB58String(key));

      if (!e) return;

      e.dec();

      // only delete when no refs are held
      if (e.hasRefs()) return;

      this.set.delete(mh.toB58String(key));
    }
  }, {
    key: 'removeForce',
    value: function removeForce(key) {
      if (this.set.has(key)) {
        this.set.delete(key);
      }
    }
  }, {
    key: 'entries',
    value: function entries() {
      return this.set.entries();
    }
  }, {
    key: 'sortedEntries',
    value: function sortedEntries() {
      return new Map(Array.from(this.set.entries()).sort());
    }
  }, {
    key: 'contains',
    value: function contains(key) {
      return this.set.get(mh.toB58String(key));
    }
  }, {
    key: 'length',
    get: function get() {
      return this.set.size;
    }
  }]);

  return Wantlist;
}();

Wantlist.Entry = Entry;
module.exports = Wantlist;