'use strict';

var EC = require('elliptic').ec;

var curveMap = {
  'P-256': 'p256',
  'P-384': 'p384',
  'P-521': 'p521'
};

// Generates an ephemeral public key and returns a function that will compute
// the shared secret key.
//
// Focuses only on ECDH now, but can be made more general in the future.
module.exports = function (curveName) {
  var curve = curveMap[curveName];
  if (!curve) {
    throw new Error('unsupported curve passed');
  }

  var ec = new EC(curve);

  var priv = ec.genKeyPair();

  // forcePrivate is used for testing only
  var genSharedKey = function genSharedKey(theirPub, forcePrivate) {
    var pub = ec.keyFromPublic(theirPub, 'hex');
    var p = forcePrivate || priv;
    return p.derive(pub.getPublic()).toBuffer('le');
  };

  return {
    key: new Buffer(priv.getPublic('hex'), 'hex'),
    genSharedKey: genSharedKey
  };
};