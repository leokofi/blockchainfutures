'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mh = require('multihashes');

// Link represents an IPFS Merkle DAG Link between Nodes.
module.exports = function () {
  function DAGLink(name, size, hash) {
    _classCallCheck(this, DAGLink);

    this.name = name;
    this.size = size;

    if (typeof hash === 'string') {
      this.hash = mh.fromB58String(hash);
    } else if (Buffer.isBuffer(hash)) {
      this.hash = hash;
    }
  }

  _createClass(DAGLink, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        Name: this.name,
        Size: this.size,
        Hash: mh.toB58String(this.hash)
      };
    }
  }, {
    key: 'toString',
    value: function toString() {
      var hash = mh.toB58String(this.hash);
      return 'DAGLink <' + hash + ' - name: "' + this.name + '", size: ' + this.size + '>';
    }
  }]);

  return DAGLink;
}();