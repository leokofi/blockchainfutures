'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var protobuf = require('protocol-buffers');
var stable = require('stable');
var fs = require('fs');
var path = require('path');
var mh = require('multihashes');

var util = require('./util');
var DAGLink = require('./dag-link');

var proto = protobuf(fs.readFileSync(path.join(__dirname, 'merkledag.proto')));

function linkSort(a, b) {
  return new Buffer(a.name || '', 'ascii').compare(new Buffer(b.name || '', 'ascii'));
}

// Helper method to get a protobuf object equivalent
function toProtoBuf(node) {
  var pbn = {};

  if (node.data && node.data.length > 0) {
    pbn.Data = node.data;
  } else {
    pbn.Data = null; // new Buffer(0)
  }

  if (node.links.length > 0) {
    pbn.Links = node.links.map(function (link) {
      return {
        Hash: link.hash,
        Name: link.name,
        Tsize: link.size
      };
    });
  } else {
    pbn.Links = null;
  }

  return pbn;
}

module.exports = function () {
  function DAGNode(data, links) {
    var _this = this;

    _classCallCheck(this, DAGNode);

    this._cached = null;
    this._encoded = null;

    this.data = data;
    this.links = [];

    // ensure links are instances of DAGLink
    if (links) {
      links.forEach(function (l) {
        if (l.constructor && l.constructor.name === 'DAGLink') {
          _this.links.push(l);
        } else {
          _this.links.push(new DAGLink(l.Name, l.Size, l.Hash));
        }
      });

      stable.inplace(this.links, linkSort);
    }
  }

  // copy - returns a clone of the DAGNode


  _createClass(DAGNode, [{
    key: 'copy',
    value: function copy() {
      var clone = new DAGNode();
      if (this.data && this.data.length > 0) {
        var buf = new Buffer(this.data.length);
        this.data.copy(buf);
        clone.data = buf;
      }

      if (this.links.length > 0) {
        clone.links = this.links.slice();
      }

      return clone;
    }

    // addNodeLink - adds a DAGLink to this node that points to node by a name

  }, {
    key: 'addNodeLink',
    value: function addNodeLink(name, node) {
      if (typeof name !== 'string') {
        throw new Error('first argument must be link name');
      }
      var link = this.makeLink(node);

      link.name = name;
      this.addRawLink(link);
    }

    // addRawLink adds a Link to this node from a DAGLink

  }, {
    key: 'addRawLink',
    value: function addRawLink(link) {
      this._encoded = null;
      this.links.push(new DAGLink(link.name, link.size, link.hash));
      stable.inplace(this.links, linkSort);
    }

    // UpdateNodeLink return a copy of the node with the link name set to point to
    // that. If a link of the same name existed, it is replaced.
    // TODO this would make more sense as an utility

  }, {
    key: 'updateNodeLink',
    value: function updateNodeLink(name, node) {
      var newnode = this.copy();
      newnode.removeNodeLink(name);
      newnode.addNodeLink(name, node);
      return newnode;
    }

    // removeNodeLink removes a Link from this node based on name

  }, {
    key: 'removeNodeLink',
    value: function removeNodeLink(name) {
      this._encoded = null; // uncache
      this.links = this.links.filter(function (link) {
        if (link.name === name) {
          return false;
        } else {
          return true;
        }
      });
    }

    // removeNodeLink removes a Link from this node based on a multihash

  }, {
    key: 'removeNodeLinkByHash',
    value: function removeNodeLinkByHash(multihash) {
      this._encoded = null; // uncache
      this.links = this.links.filter(function (link) {
        if (link.hash.equals(multihash)) {
          return false;
        } else {
          return true;
        }
      });
    }

    // makeLink returns a DAGLink node from a DAGNode
    // TODO: this would make more sense as an utility

  }, {
    key: 'makeLink',
    value: function makeLink(node) {
      return new DAGLink(null, node.size(), node.multihash());
    }

    // multihash - returns the multihash value of this DAGNode

  }, {
    key: 'multihash',
    value: function multihash() {
      this.encoded();
      return this._cached;
    }

    // Size returns the total size of the data addressed by node,
    // including the total sizes of references.

  }, {
    key: 'size',
    value: function size() {
      var buf = this.encoded();
      if (!buf) {
        return 0;
      }

      return this.links.reduce(function (sum, l) {
        return sum + l.size;
      }, buf.length);
    }

    // Encoded returns the encoded raw data version of a Node instance.
    // It may use a cached encoded version, unless the force flag is given.

  }, {
    key: 'encoded',
    value: function encoded(force) {
      if (force || !this._encoded) {
        this._encoded = this.marshal();

        if (this._encoded) {
          this._cached = util.hash(this._encoded);
        }
      }
      return this._encoded;
    }

    // marshal - encodes the DAGNode into a probuf

  }, {
    key: 'marshal',
    value: function marshal() {
      return proto.PBNode.encode(toProtoBuf(this));
    }

    // unMarshal - decodes a protobuf into a DAGNode
    // TODO: this would make more sense as an utility

  }, {
    key: 'unMarshal',
    value: function unMarshal(data) {
      var pbn = proto.PBNode.decode(data);
      this.links = pbn.Links.map(function (link) {
        return new DAGLink(link.Name, link.Tsize, link.Hash);
      });

      stable.inplace(this.links, linkSort);
      this.data = pbn.Data || new Buffer(0);
      return this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        Data: this.data,
        Links: this.links.map(function (l) {
          return l.toJSON();
        }),
        Hash: mh.toB58String(this.multihash()),
        Size: this.size()
      };
    }
  }, {
    key: 'toString',
    value: function toString() {
      var hash = mh.toB58String(this.multihash());
      return 'DAGNode <' + hash + ' - data: "' + this.data.toString() + '", links: ' + this.links.length + ', size: ' + this.size() + '>';
    }
  }]);

  return DAGNode;
}();