'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defer = require('pull-defer/duplex');

module.exports = function () {
  function Connection(conn, info) {
    _classCallCheck(this, Connection);

    this.peerInfo = null;
    this.conn = defer();

    if (conn) {
      this.setInnerConn(conn, info);
    } else if (info) {
      this.info = info;
    }
  }

  _createClass(Connection, [{
    key: 'getPeerInfo',
    value: function getPeerInfo(callback) {
      if (this.info && this.info.getPeerInfo) {
        return this.info.getPeerInfo(callback);
      }

      if (!this.peerInfo) {
        return callback(new Error('Peer Info not set yet'));
      }

      callback(null, this.peerInfo);
    }
  }, {
    key: 'setPeerInfo',
    value: function setPeerInfo(peerInfo) {
      if (this.info && this.info.setPeerInfo) {
        return this.info.setPeerInfo(peerInfo);
      }

      this.peerInfo = peerInfo;
    }
  }, {
    key: 'getObservedAddrs',
    value: function getObservedAddrs(callback) {
      if (this.info && this.info.getObservedAddrs) {
        return this.info.getObservedAddrs(callback);
      }
      callback(null, []);
    }
  }, {
    key: 'setInnerConn',
    value: function setInnerConn(conn, info) {
      this.conn.resolve(conn);
      if (info) {
        this.info = info;
      } else {
        this.info = conn;
      }
    }
  }, {
    key: 'source',
    get: function get() {
      return this.conn.source;
    }
  }, {
    key: 'sink',
    get: function get() {
      return this.conn.sink;
    }
  }]);

  return Connection;
}();