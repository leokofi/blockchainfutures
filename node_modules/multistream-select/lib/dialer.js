'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lp = require('pull-length-prefixed');
var varint = require('varint');
var pull = require('pull-stream');
var Connection = require('interface-connection').Connection;
var debug = require('debug');
var log = debug('multistream:dialer');

var PROTOCOL_ID = require('./constants').PROTOCOL_ID;
var agrmt = require('./agreement');

function getRandomId() {
  return (~~(Math.random() * 1e9)).toString(36);
}

module.exports = function () {
  function Dialer() {
    _classCallCheck(this, Dialer);

    this.conn = null;
    this.msThreadId = getRandomId();
  }

  // perform the multistream handshake


  _createClass(Dialer, [{
    key: 'handle',
    value: function handle(rawConn, callback) {
      var _this = this;

      log('(%s) dialer handle conn', this.msThreadId);
      var ms = agrmt.select(PROTOCOL_ID, function (err, conn) {
        if (err) {
          return callback(err);
        }
        log('(%s) handshake success', _this.msThreadId);

        _this.conn = new Connection(conn, rawConn);

        callback();
      }, this.msThreadId);

      pull(rawConn, ms, rawConn);
    }
  }, {
    key: 'select',
    value: function select(protocol, callback) {
      var _this2 = this;

      log('(%s) dialer select %s', this.msThreadId, protocol);
      if (!this.conn) {
        return callback(new Error('multistream handshake has not finalized yet'));
      }

      var selectStream = agrmt.select(protocol, function (err, conn) {
        if (err) {
          _this2.conn = new Connection(conn, _this2.conn);
          return callback(err);
        }
        callback(null, new Connection(conn, _this2.conn));
      }, this.msThreadId);

      pull(this.conn, selectStream, this.conn);
    }
  }, {
    key: 'ls',
    value: function ls(callback) {
      var lsStream = agrmt.select('ls', function (err, conn) {
        if (err) {
          return callback(err);
        }

        pull(conn, lp.decode(), collectLs(conn), pull.map(stringify), pull.collect(function (err, list) {
          if (err) {
            return callback(err);
          }
          callback(null, list.slice(1));
        }));
      });

      pull(this.conn, lsStream, this.conn);
    }
  }]);

  return Dialer;
}();

function stringify(buf) {
  return buf.toString().slice(0, -1);
}

function collectLs(conn) {
  var first = true;
  var counter = 0;

  return pull.take(function (msg) {
    if (first) {
      varint.decode(msg);
      counter = varint.decode(msg, varint.decode.bytes);
      return true;
    }

    return counter-- > 0;
  });
}