'use strict';

var pull = require('pull-stream');
var handshake = require('pull-handshake');
var debug = require('debug');

var log = debug('libp2p:secio');
log.error = debug('libp2p:secio:error');

var etm = require('../etm');
var crypto = require('./crypto');

// step 3. Finish
// -- send expected message to verify encryption works (send local nonce)
module.exports = function finish(state, cb) {
  log('3. finish - start');

  var proto = state.protocols;
  var stream = state.shake.rest();
  var shake = handshake({ timeout: state.timeout });

  pull(stream, etm.createUnboxStream(proto.remote.cipher, proto.remote.mac), shake, etm.createBoxStream(proto.local.cipher, proto.local.mac), stream);

  shake.handshake.write(state.proposal.in.rand);
  shake.handshake.read(state.proposal.in.rand.length, function (err, nonceBack) {
    var fail = function fail(err) {
      log.error(err);
      state.secure.resolve({
        source: pull.error(err),
        sink: function sink(read) {}
      });
      cb(err);
    };

    if (err) return fail(err);

    try {
      crypto.verifyNonce(state, nonceBack);
    } catch (err) {
      return fail(err);
    }

    log('3. finish - finish');

    // Awesome that's all folks.
    state.secure.resolve(shake.handshake.rest());
    cb();
  });
};