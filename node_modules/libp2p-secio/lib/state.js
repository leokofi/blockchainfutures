'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var handshake = require('pull-handshake');
var deferred = require('pull-defer');

var State = function () {
  function State(id, key, timeout, cb) {
    _classCallCheck(this, State);

    this.setup();
    this.id.local = id;
    this.key.local = key;
    this.timeout = timeout || 60 * 1000;
    cb = cb || function () {};

    this.secure = deferred.duplex();
    this.stream = handshake({ timeout: this.timeout }, cb);
    this.shake = this.stream.handshake;
    delete this.stream.handshake;
  }

  _createClass(State, [{
    key: 'setup',
    value: function setup() {
      this.id = {
        local: null,
        remote: null
      };

      this.key = {
        local: null,
        remote: null
      };

      this.shake = null;

      this.cleanSecrets();
    }

    // remove all data from the handshake that is not needed anymore

  }, {
    key: 'cleanSecrets',
    value: function cleanSecrets() {
      this.shared = {};

      this.ephemeralKey = {
        local: null,
        remote: null
      };

      this.proposal = {
        in: null,
        out: null
      };

      this.proposalEncoded = {
        in: null,
        out: null
      };

      this.protocols = {
        local: null,
        remote: null
      };

      this.exchange = {
        in: null,
        out: null
      };
    }
  }]);

  return State;
}();

module.exports = State;