'use strict';

var protobuf = require('protocol-buffers');
var fs = require('fs');
var path = require('path');
var pbm = protobuf(fs.readFileSync(path.join(__dirname, './crypto.proto')));

exports.utils = require('./utils');
var keys = exports.keys = require('./keys');

exports.keyStretcher = require('./key-stretcher');
exports.generateEphemeralKeyPair = require('./ephemeral-keys');

// Generates a keypair of the given type and bitsize
exports.generateKeyPair = function (type, bits) {
  var key = keys[type.toLowerCase()];
  if (!key) {
    throw new Error('invalid or unsupported key type');
  }

  return key.generateKeyPair(bits);
};

// Converts a protobuf serialized public key into its
// representative object
exports.unmarshalPublicKey = function (buf) {
  var decoded = pbm.PublicKey.decode(buf);

  switch (decoded.Type) {
    case pbm.KeyType.RSA:
      return keys.rsa.unmarshalRsaPublicKey(decoded.Data);
    default:
      throw new Error('invalid or unsupported key type');
  }
};

// Converts a public key object into a protobuf serialized public key
exports.marshalPublicKey = function (key, type) {
  type = (type || 'rsa').toLowerCase();

  // for now only rsa is supported
  if (type !== 'rsa') {
    throw new Error('invalid or unsupported key type');
  }

  return pbm.PublicKey.encode({
    Type: pbm.KeyType.RSA,
    Data: key.marshal()
  });
};

// Converts a protobuf serialized private key into its
// representative object
exports.unmarshalPrivateKey = function (buf) {
  var decoded = pbm.PrivateKey.decode(buf);

  switch (decoded.Type) {
    case pbm.KeyType.RSA:
      return keys.rsa.unmarshalRsaPrivateKey(decoded.Data);
    default:
      throw new Error('invalid or unsupported key type');
  }
};

// Converts a private key object into a protobuf serialized private key
exports.marshalPrivateKey = function (key, type) {
  type = (type || 'rsa').toLowerCase();

  // for now only rsa is supported
  if (type !== 'rsa') {
    throw new Error('invalid or unsupported key type');
  }

  return pbm.PrivateKey.encode({
    Type: pbm.KeyType.RSA,
    Data: key.marshal()
  });
};