'use strict';

var bs58 = require('bs58');

module.exports = PeerBook;

function PeerBook() {
  var _this = this;

  if (!(this instanceof PeerBook)) {
    return new PeerBook();
  }

  var peers = {};

  this.put = function (peerInfo, replace) {
    if (peers[peerInfo.id.toB58String()] && !replace) {
      // peerInfo.replace merges by default
      peers[peerInfo.id.toB58String()].multiaddr.replace([], peerInfo.multiaddrs);
    }
    peers[peerInfo.id.toB58String()] = peerInfo;
  };

  this.getAll = function () {
    return peers;
  };

  this.getByB58String = function (b58String) {
    var peerInfo = peers[b58String];
    if (peerInfo) {
      return peerInfo;
    }
    throw new Error('PeerInfo not found');
  };

  this.getByMultihash = function (multihash) {
    var b58multihash = bs58.encode(multihash).toString();
    return _this.getByB58String(b58multihash);
  };

  this.removeByB58String = function (b58String) {
    if (peers[b58String]) {
      delete peers[b58String];
    }
  };

  this.removeByMultihash = function (multihash) {
    var b58multihash = bs58.encode(multihash).toString();
    _this.removeByB58String(b58multihash);
  };

  // TODO serialize PeerBook into MerkleDAG Objects
}