'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var debug = require('debug');
var log = debug('cli:config');
log.error = debug('cli:config:error');
var utils = require('../utils');

module.exports = {
  command: 'config <key> [value]',

  description: 'Get and set IPFS config values',

  builder: function builder(yargs) {
    return yargs.commandDir('config').options({
      bool: {
        type: 'boolean',
        default: false
      },
      json: {
        type: 'boolean',
        default: false
      }
    });
  },
  handler: function handler(argv) {
    if (argv._handled) return;
    argv._handled = true;

    var bool = argv.bool;
    var json = argv.json;
    var key = argv.key;
    var value = argv.value;

    utils.getIPFS(function (err, ipfs) {
      if (err) {
        throw err;
      }

      if (!value) {
        // Get the value of a given key
        ipfs.config.get(key, function (err, value) {
          if (err) {
            log.error(err);
            throw new Error('failed to read the config');
          }

          if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
            console.log(JSON.stringify(value, null, 2));
          } else {
            console.log(value);
          }
        });
      } else {
        // Set the new value of a given key

        if (bool) {
          value = value === 'true';
        } else if (json) {
          try {
            value = JSON.parse(value);
          } catch (err) {
            log.error(err);
            throw new Error('invalid JSON provided');
          }
        }

        ipfs.config.set(key, value, function (err) {
          if (err) {
            log.error(err);
            throw new Error('failed to read the config');
          }
        });
      }
    });
  }
};