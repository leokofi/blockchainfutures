'use strict';

var boom = require('boom');
var multiaddr = require('multiaddr');

exports = module.exports;

// common pre request handler that parses the args and returns `key` which is assigned to `request.pre.args`
exports.parseKey = function (request, reply) {
  if (!request.query.arg) {
    return reply("Argument 'multiaddr' is required").code(400).takeover();
  }

  try {
    return reply({
      addr: multiaddr(request.query.arg)
    });
  } catch (err) {
    return reply({
      Message: 'Not a valid multiaddr',
      Code: 0
    }).code(500).takeover();
  }
};

exports.list = function (request, reply) {
  var ipfs = request.server.app.ipfs;
  ipfs.bootstrap.list(function (err, list) {
    if (err) {
      return reply(boom.badRequest(err));
    }
    return reply(list);
  });
};

exports.add = {
  parseArgs: exports.parseKey,
  handler: function handler(request, reply) {
    var ipfs = request.server.app.ipfs;
    var addr = request.pre.args.addr;

    ipfs.bootstrap.add(addr.toString(), function (err, list) {
      if (err) {
        return reply(boom.badRequest(err));
      }
      return reply();
    });
  }
};

exports.rm = {
  parseArgs: exports.parseKey,
  handler: function handler(request, reply) {
    var ipfs = request.server.app.ipfs;
    var addr = request.pre.args.addr;

    ipfs.bootstrap.rm(addr.toString(), function (err, list) {
      if (err) {
        return reply(boom.badRequest(err));
      }
      return reply();
    });
  }
};