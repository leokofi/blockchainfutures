'use strict';

var Block = require('ipfs-block');
var multihash = require('multihashes');

module.exports = function block(self) {
  return {
    get: function get(hash, callback) {
      hash = cleanHash(hash);
      self._blockS.get(hash, callback);
    },
    put: function put(block, callback) {
      if (Array.isArray(block)) {
        return callback(new Error('Array is not supported'));
      }
      if (Buffer.isBuffer(block)) {
        block = new Block(block);
      }

      self._blockS.put(block, function (err) {
        callback(err, block);
      });
    },
    del: function del(hash, callback) {
      hash = cleanHash(hash);
      self._blockS.delete(hash, callback);
    },
    stat: function stat(hash, callback) {
      hash = cleanHash(hash);

      self._blockS.get(hash, function (err, block) {
        if (err) {
          return callback(err);
        }
        callback(null, {
          key: multihash.toB58String(hash),
          size: block.data.length
        });
      });
    }
  };
};

function cleanHash(hash) {
  if (typeof hash === 'string') {
    return multihash.fromB58String(hash);
  }
  return hash;
}