'use strict';

var multiaddr = require('multiaddr');
var promisify = require('promisify-es6');
var flatMap = require('lodash.flatmap');
var values = require('lodash.values');

var OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;

module.exports = function swarm(self) {
  return {
    peers: promisify(function (callback) {
      if (!self.isOnline()) {
        return callback(OFFLINE_ERROR);
      }

      var peers = self._libp2pNode.peerBook.getAll();
      var mas = flatMap(Object.keys(peers), function (id) {
        return peers[id].multiaddrs;
      });

      callback(null, mas);
    }),

    // all the addrs we know
    addrs: promisify(function (callback) {
      if (!self.isOnline()) {
        return callback(OFFLINE_ERROR);
      }

      var peers = values(self._libp2pNode.peerBook.getAll());
      callback(null, peers);
    }),

    localAddrs: promisify(function (callback) {
      if (!self.isOnline()) {
        return callback(OFFLINE_ERROR);
      }

      callback(null, self._libp2pNode.peerInfo.multiaddrs);
    }),

    connect: promisify(function (maddr, callback) {
      if (!self.isOnline()) {
        return callback(OFFLINE_ERROR);
      }

      if (typeof maddr === 'string') {
        maddr = multiaddr(maddr);
      }

      self._libp2pNode.dialByMultiaddr(maddr, callback);
    }),

    disconnect: promisify(function (maddr, callback) {
      if (!self.isOnline()) {
        return callback(OFFLINE_ERROR);
      }

      if (typeof maddr === 'string') {
        maddr = multiaddr(maddr);
      }

      self._libp2pNode.hangUpByMultiaddr(maddr, callback);
    }),

    filters: promisify(function (callback) {
      // TODO
      throw new Error('Not implemented');
    })
  };
};