'use strict';

var Libp2pNode = require('libp2p-ipfs').Node;
var promisify = require('promisify-es6');

module.exports = function libp2p(self) {
  // TODO Just expose libp2p API directly, this start stop wrapping doesn't make that much sense anymore :)
  return {
    start: promisify(function (callback) {
      self._libp2pNode = new Libp2pNode(self._peerInfo);
      self._libp2pNode.start(function () {
        // TODO connect to bootstrap nodes, it will get us more addrs
        self._libp2pNode.peerInfo.multiaddrs.forEach(function (ma) {
          console.log('Swarm listening on', ma.toString());
        });
        callback();
      });

      self._libp2pNode.discovery.on('peer', function (peerInfo) {
        self._libp2pNode.peerBook.put(peerInfo);
        self._libp2pNode.dialByPeerInfo(peerInfo, function () {});
      });
      self._libp2pNode.swarm.on('peer-mux-established', function (peerInfo) {
        self._libp2pNode.peerBook.put(peerInfo);
      });
    }),
    stop: promisify(function (callback) {
      self._libp2pNode.stop(callback);
    })
  };
};