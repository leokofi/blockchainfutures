'use strict';

var promisify = require('promisify-es6');
var _get = require('lodash.get');
var _has = require('lodash.has');
var _set = require('lodash.set');

module.exports = function config(self) {
  return {
    get: promisify(function (key, callback) {
      if (typeof key === 'function') {
        callback = key;
        key = undefined;
      }

      if (!key) {
        return self._repo.config.get(callback);
      }

      if (typeof key !== 'string') {
        return callback(new Error('Invalid key type'));
      }

      self._repo.config.get(function (err, config) {
        if (err) {
          return callback(err);
        }
        if (_has(config, key)) {
          var value = _get(config, key, undefined);
          callback(null, value);
        } else {
          callback(new Error('Key does not exist in config'));
        }
      });
    }),
    set: promisify(function (key, value, callback) {
      if (!key || typeof key !== 'string') {
        return callback(new Error('Invalid key type'));
      }

      if (value === undefined || Buffer.isBuffer(value)) {
        return callback(new Error('Invalid value type'));
      }

      self._repo.config.get(function (err, config) {
        if (err) {
          return callback(err);
        }
        _set(config, key, value);
        self.config.replace(config, callback);
      });
    }),
    replace: promisify(function (config, callback) {
      self._repo.config.set(config, callback);
    })
  };
};