'use strict';

var BlockService = require('ipfs-block-service');
var mDAG = require('ipfs-merkle-dag');
var DAGService = mDAG.DAGService;
var PeerBook = require('peer-book');

var defaultRepo = require('./default-repo');

var goOnline = require('./components/go-online');
var goOffline = require('./components/go-offline');
var isOnline = require('./components/is-online');
var load = require('./components/load');
var version = require('./components/version');
var id = require('./components/id');
var repo = require('./components/repo');
var init = require('./components/init');
var bootstrap = require('./components/bootstrap');
var config = require('./components/config');
var block = require('./components/block');
var object = require('./components/object');
var libp2p = require('./components/libp2p');
var swarm = require('./components/swarm');
var ping = require('./components/ping');
var files = require('./components/files');
var bitswap = require('./components/bitswap');

exports = module.exports = IPFS;

function IPFS(repoInstance) {
  if (!(this instanceof IPFS)) {
    throw new Error('Must be instantiated with new');
  }

  if (typeof repoInstance === 'string' || repoInstance === undefined) {
    repoInstance = defaultRepo(repoInstance);
  }

  // IPFS Core Internals
  this._repo = repoInstance;
  this._peerInfoBook = new PeerBook();
  this._peerInfo = null;
  this._libp2pNode = null;
  this._bitswap = null;
  this._blockS = new BlockService(this._repo);
  this._dagS = new DAGService(this._blockS);

  // IPFS Core exposed components
  //   for booting up a node
  this.goOnline = goOnline(this);
  this.goOffline = goOffline(this);
  this.isOnline = isOnline(this);
  this.load = load(this);
  this.init = init(this);
  //   interface-ipfs-core defined API
  this.version = version(this);
  this.id = id(this);
  this.repo = repo(this);
  this.bootstrap = bootstrap(this);
  this.config = config(this);
  this.block = block(this);
  this.object = object(this);
  this.libp2p = libp2p(this);
  this.swarm = swarm(this);
  this.files = files(this);
  this.bitswap = bitswap(this);
  this.ping = ping(this);
}