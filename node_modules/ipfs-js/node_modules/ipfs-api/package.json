{
  "_args": [
    [
      {
        "raw": "ipfs-api@git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
        "scope": null,
        "escapedName": "ipfs-api",
        "name": "ipfs-api",
        "rawSpec": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
        "spec": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
          "sshUrl": "git+ssh://git@github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
          "httpsUrl": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
          "gitUrl": "git://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
          "shortcut": "github:ckeenan/node-ipfs-api#concat-bin@2.3.2",
          "directUrl": "https://raw.githubusercontent.com/ckeenan/node-ipfs-api/concat-bin%402.3.2/package.json"
        }
      },
      "/Users/Subbu/Desktop/blockchainfutures/node_modules/ipfs-js"
    ]
  ],
  "_from": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
  "_id": "ipfs-api@2.3.2",
  "_inCache": true,
  "_location": "/ipfs-js/ipfs-api",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ipfs-api@git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
    "scope": null,
    "escapedName": "ipfs-api",
    "name": "ipfs-api",
    "rawSpec": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
    "spec": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
      "sshUrl": "git+ssh://git@github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
      "httpsUrl": "git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
      "gitUrl": "git://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
      "shortcut": "github:ckeenan/node-ipfs-api#concat-bin@2.3.2",
      "directUrl": "https://raw.githubusercontent.com/ckeenan/node-ipfs-api/concat-bin%402.3.2/package.json"
    }
  },
  "_requiredBy": [
    "/ipfs-js"
  ],
  "_resolved": "git+https://github.com/ckeenan/node-ipfs-api.git#417bf111b179bdb05a030b11ed4e6aa14ac5d549",
  "_shasum": "23a9f21ad66c3935418887b997f86ac3a77efd98",
  "_shrinkwrap": null,
  "_spec": "ipfs-api@git+https://github.com/ckeenan/node-ipfs-api.git#concat-bin@2.3.2",
  "_where": "/Users/Subbu/Desktop/blockchainfutures/node_modules/ipfs-js",
  "author": {
    "name": "Matt Bell",
    "email": "mappum@gmail.com"
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "bugs": {
    "url": "https://github.com/ipfs/node-ipfs-api/issues"
  },
  "contributors": [
    {
      "name": "Travis Person",
      "email": "travis.person@gmail.com"
    },
    {
      "name": "Jeromy Jonson",
      "email": "why@ipfs.io"
    }
  ],
  "dependencies": {
    "brfs": "^1.4.0",
    "merge-stream": "^1.0.0",
    "multiaddr": "^1.0.0",
    "multipart-stream": "^2.0.0",
    "vinyl": "^0.5.1",
    "vinyl-fs-browser": "^0.1.0",
    "vinyl-multipart-stream": "^1.2.5"
  },
  "description": "A client library for the IPFS API",
  "devDependencies": {
    "browserify": "^11.0.0",
    "ipfsd-ctl": "^0.3.3",
    "mocha": "^2.2.5",
    "pre-commit": "^1.0.6",
    "standard": "^3.3.2",
    "uglify-js": "^2.4.24"
  },
  "gitHead": "417bf111b179bdb05a030b11ed4e6aa14ac5d549",
  "homepage": "https://github.com/ipfs/node-ipfs-api",
  "keywords": [
    "ipfs"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "ipfs-api",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "readme": "IPFS API wrapper library for Node.js and the browser\n====================================================\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io) [![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/) [![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs) [![Dependency Status](https://david-dm.org/ipfs/node-ipfs-api.svg?style=flat-square)](https://david-dm.org/ipfs/node-ipfs-api)\n\n> A client library for the IPFS API.\n\n# Usage\n\n## Installing the module\n\n### In Node.js Through npm\n\n```bash\n$ npm install --save ipfs-api\n```\n\n```javascript\nvar ipfsAPI = require('ipfs-api')\n\n// connect to ipfs daemon API server\nvar ipfs = ipfsAPI('localhost', '5001') // leaving out the arguments will default to these values\n```\n\n### In the Browser through browserify\n\nSame as in Node.js, you just have to browserify the code before serving it.\n\n### In the Browser through `<script>` tag\n\nMake the [ipfsapi.min.js](/ipfsapi.min.js) available through your server and load it using a normal `<script>` tag, this will exporrt the `ipfsAPI` constructor on the `window` object, such that:\n\n```\nvar ipfs = window.ipfsAPI('localhost', '5001')\n```\n\nIf you omit the host and port, the api will parse window.host, and use this information. I.e, this also works:\n\n```\nvar ipfs = window.ipfsAPI()\n```\n\nThis can be useful if you want to write apps that can be run from multiple different gateways.\n\n#### Gotchas\n\nWhen using the api from script tag for things that require buffers (ipfs.add, for example), you will have to use either the exposed ipfs.Buffer, that works just like a node buffer, or use this [browser buffer](https://github.com/feross/buffer)\n\n## CORS\n\nIf are using this module in a browser with something like browserify, then you will get an error saying that the origin is not allowed.  This would be a CORS (\"Cross Origin Resource Sharing\") failure. The ipfs server rejects requests from unknown domains by default.  You can whitelist the domain that you are calling from by exporting API_ORIGIN and restarting the daemon, like:\n\n```bash\nexport API_ORIGIN=\"http://localhost:8080\"\nipfs daemon\n```\n\n## API\n\n### Level 1 Commands\nLevel 1 commands are simple commands\n\n#### add\n\nAdd a file (where file is any data) to ipfs returning the hash and name. The\nname value will only be set if you are actually sending a file. A single or\narray of files can be used.\n\n**Usage**\n```javascript\nipfs.add(files, function(err, res) {\n    if(err || !res) return console.error(err)\n    \n    res.forEach(function(file) {\n        console.log(file.Hash)\n        console.log(file.Name)\n    })\n})\n```\n`files` can be a mixed array of filenames or buffers of data. A single value is\nalso acceptable.\n\nExample\n```\nvar files = [\"../files/hello.txt\", new Buffer(\"ipfs!\")]\nvar files = \"../files/hello.txt\"\n```\n\n**Curl**\n```\ncurl 'http://localhost:5001/api/v0/add?stream-cannels=true' \\\n-H 'content-type: multipart/form-data; boundary=a831rwxi1a3gzaorw1w2z49dlsor' \\\n-H 'Connection: keep-alive' \\\n--data-binary $'--a831rwxi1a3gzaorw1w2z49dlsor\\r\\nContent-Type: application/octet-stream\\r\\nContent-Disposition: file; name=\"file\"; filename=\"Hello.txt\"\\r\\n\\r\\nhello--a831rwxi1a3gzaorw1w2z49dlsor--' --compressed\n```\n\n**Response**\n```\n[{\n    Hash: string,\n    Name: string\n}, ...]\n```\n*The name value will only be set for actual files*\n\n\n\n#### cat\n\nRetrieve the contents of a single, or array of hashes\n\n**Usage**\n```javascript\nipfs.cat(hashs, function(err, res) {\n    if(err || !res) return console.error(err)\n    \n    if(res.readable) {\n        // Returned as a stream\n        res.pipe(process.stdout)\n    } else {\n        // Returned as a string\n        console.log(res)\n    }\n})\n```\n\n**Curl**\n```\ncurl \"http://localhost:5001/api/v0/cat?arg=<hash>&stream-channels=true\"\n```\n\n**Response**\n\nThe response is either a readable stream, or a string.\n\n#### ls\nGet the node structure of a hash, included in it is a hash and array to links.\n\n**Usage**\n```javascript\nipfs.ls(hashs, function(err, res) {\n    if(err || !res) return console.error(err)\n    \n    res.Objects.forEach(function(node) {\n        console.log(node.Hash)\n        console.log(\"Links [%d]\", node.Links.length)\n        node.Links.forEach(function(link, i) {\n            console.log(\"[%d]\", i, link)\n        })\n    })\n})\n```\n\n**Curl**\n```\ncurl \"http://localhost:5001/api/v0/ls?arg=<hash>&stream-channels=true\"\n```\n\n**Response**\n```\n{\n    Objects: [\n        { \n            Hash: string,\n            Links: [{\n                Name: string,\n                Hash: string,\n                Size: number\n            }, ...]\n        },\n        ....\n    ]\n}\n```\n\n\n**version**\n\n**commands**\n\n### Level 2 Commands\nLevel 2 commands are simply named spaced wrapped commands\n\n#### Config\n\n#### Update\n\n#### Mount\n\n#### Diag\n\n#### Block\n\n#### Object\n\n**Curl**\n```\ncurl 'http://localhost:5001/api/v0/object/get?arg=QmYEqnfCZp7a39Gxrgyv3qRS4MoCTGjegKV6zroU3Rvr52&stream-channels=true' --compressed\n```\n\n**Response**\n```\n{\n    Links: [{\n        Name: string,\n        Hash: string,\n        Size: number\n    }, ...],\n    Data: string\n```\n*Data is base64 encoded*\n\n#### Swarm\n\n#### Pin\n\n#### Gateway\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ipfs/node-ipfs-api.git"
  },
  "scripts": {
    "build": "browserify -t brfs -s ipfsAPI -e ./src/index.js | tee dist/ipfsapi.js | ./node_modules/.bin/uglifyjs -m > dist/ipfsapi.min.js",
    "lint": "standard --format",
    "test": "mocha"
  },
  "version": "2.3.2"
}
