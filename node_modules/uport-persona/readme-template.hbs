# uPort Persona
A library for creating, updating and reading attributes and claims on uport personas. It's intended as an easy interface to the uport-registry, allowing developers to focus on the actual data instead of the datastructure of the object stored in the registry. It contains two main classes `Persona` for getting information on a persona, and `MutablePersona` which is a subclass of `Persona` with additional features for updating persona information.
## Example usage
### Importing
```js
import { Persona, MutablePersona } from 'uport-persona';
```

### Basic information viewing
For each persona you want to interact with you have to create a separate instance of the Persona class.
```js
// the address of the persona you want to interact with
let myAddress = "0x123...";
let ipfsProvider = {
  host: 'localhost',
  port: '5001',
  protocol: 'https',
  root: ''
}
let persona = new Persona(myAddress, ipfs, web3.currentProvider);
persona.load().then(() => { ... });
```

Once instantiated you can start by getting the current profile:
```js
let profile = persona.getProfile();
```
The `profile` is in JSON format containing all attributes associated with the persona.

### Viewing attestations
An attestation, also called a claim is the basic building block of the information associated with a persona. By default all attributes are self signed claims created by the persona that it's associated with. But an attribute can have multiple claims, meaning that several parties have signed it. The claims are in the same format as [blockstack-profiles](https://github.com/blockstack/blockstack-profiles-js).
To get all claims associated with the persona:
```js
let claims = persona.getAllClaims();
```

You can also get all claims to a specific attribute:
```js
let claims = persona.getClaims("MyAttribute");
```

### Signing attributes as a third party
As a third party you would like to attest to the fact that the given persona has a specific attribute. By signing an attribute you create a claim.
```js
let thirdPartyPrivKey = ...
let thirdPartyAddress = "0x...";
let claim = persona.signAttribute("MyAttribute", thirdPartyPrivKey, thirdPartyAddress);
```

### Modifying a persona
To modify a persona the `MutablePersona` class needs to be used. It's instantiated in the same way as the `Persona` class. An important thing to note is that `MutablePersona` will make changes locally and only write the changes to the blockchain if the method `writeToRegistry` is called.
```js
// the address of the persona you want to interact with
let myAddress = "0x123...";
let ipfs = ipfsApi(<hostname>, <port>);
let persona = new MutablePersona(myAddress, ipfs, web3.currentProvider);
persona.load().then(() => { ... });
```

#### Creating a profile.
Note that the first thing that needs to be added to a profile is the public signing key. If this is not done the `addAttribute` method will throw an error.
```js
let myPrivSignKey = ...
persona.setPublicSigningKey(myPrivSignKey)
persona.addAttribute({ attributeName: attributeValue }, privKey);
```

#### Adding a claim.
```js
persona.addClaim(claim)
```

#### Write the changes to the blockchain.
While making changes to the persona these changes are only stored in the javascript object. To save the changes to the blockchain the following function needs to be called.
```js
persona.writeToRegistry().then((txHash) => { ... });
```

## Running tests
Simply run
```
$ npm test
```
## Documentation
{{#class name="Persona"}}{{>docs}}{{/class}}

{{#class name="MutablePersona"}}{{>docs}}{{/class}}
