'use strict';

var multistream = require('multistream-select');
var Connection = require('interface-connection').Connection;
var debug = require('debug');
var log = debug('libp2p:swarm:dial');

var protocolMuxer = require('./protocol-muxer');

module.exports = function dial(swarm) {
  return function (pi, protocol, callback) {
    if (typeof protocol === 'function') {
      callback = protocol;
      protocol = null;
    }

    if (!callback) {
      callback = function noop() {};
    }

    var proxyConn = new Connection();

    var b58Id = pi.id.toB58String();
    log('dialing %s', b58Id);

    if (!swarm.muxedConns[b58Id]) {
      if (!swarm.conns[b58Id]) {
        attemptDial(pi, function (err, conn) {
          if (err) {
            return callback(err);
          }
          gotWarmedUpConn(conn);
        });
      } else {
        var conn = swarm.conns[b58Id];
        swarm.conns[b58Id] = undefined;
        gotWarmedUpConn(conn);
      }
    } else {
      if (!protocol) {
        return callback();
      }
      gotMuxer(swarm.muxedConns[b58Id].muxer);
    }

    return proxyConn;

    function gotWarmedUpConn(conn) {
      conn.setPeerInfo(pi);
      attemptMuxerUpgrade(conn, function (err, muxer) {
        if (!protocol) {
          if (err) {
            swarm.conns[b58Id] = conn;
          }
          return callback();
        }

        if (err) {
          // couldn't upgrade to Muxer, it is ok
          protocolHandshake(conn, protocol, callback);
        } else {
          gotMuxer(muxer);
        }
      });
    }

    function gotMuxer(muxer) {
      if (swarm.identify) {
        // TODO: Consider:
        // 1. overload getPeerInfo
        // 2. exec identify (through getPeerInfo)
        // 3. update the peerInfo that is already stored in the conn
      }

      openConnInMuxedConn(muxer, function (conn) {
        protocolHandshake(conn, protocol, callback);
      });
    }

    function attemptDial(pi, cb) {
      var tKeys = swarm.availableTransports(pi);

      if (tKeys.length === 0) {
        return cb(new Error('No available transport to dial to'));
      }

      nextTransport(tKeys.shift());

      function nextTransport(key) {
        var multiaddrs = pi.multiaddrs.slice();
        swarm.transport.dial(key, multiaddrs, function (err, conn) {
          if (err) {
            if (tKeys.length === 0) {
              return cb(new Error('Could not dial in any of the transports'));
            }
            return nextTransport(tKeys.shift());
          }

          cryptoDial();

          function cryptoDial() {
            var ms = new multistream.Dialer();
            ms.handle(conn, function (err) {
              if (err) {
                return cb(err);
              }

              var id = swarm._peerInfo.id;
              log('selecting crypto: %s', swarm.crypto.tag);
              ms.select(swarm.crypto.tag, function (err, conn) {
                if (err) {
                  return cb(err);
                }

                var wrapped = swarm.crypto.encrypt(id, id.privKey, conn);
                cb(null, wrapped);
              });
            });
          }
        });
      }
    }

    function attemptMuxerUpgrade(conn, cb) {
      var muxers = Object.keys(swarm.muxers);
      if (muxers.length === 0) {
        return cb(new Error('no muxers available'));
      }

      // 1. try to handshake in one of the muxers available
      // 2. if succeeds
      //  - add the muxedConn to the list of muxedConns
      //  - add incomming new streams to connHandler

      nextMuxer(muxers.shift());

      function nextMuxer(key) {
        var ms = new multistream.Dialer();
        ms.handle(conn, function (err) {
          if (err) {
            return callback(new Error('multistream not supported'));
          }
          log('selecting %s', key);
          ms.select(key, function (err, conn) {
            if (err) {
              if (muxers.length === 0) {
                cb(new Error('could not upgrade to stream muxing'));
              } else {
                nextMuxer(muxers.shift());
              }
              return;
            }

            var muxedConn = swarm.muxers[key].dialer(conn);
            swarm.muxedConns[b58Id] = {};
            swarm.muxedConns[b58Id].muxer = muxedConn;
            // should not be needed anymore - swarm.muxedConns[b58Id].conn = conn

            swarm.emit('peer-mux-established', pi);

            muxedConn.once('close', function () {
              delete swarm.muxedConns[pi.id.toB58String()];
              swarm.emit('peer-mux-closed', pi);
            });

            // For incoming streams, in case identify is on
            muxedConn.on('stream', function (conn) {
              protocolMuxer(swarm.protocols, conn);
            });

            cb(null, muxedConn);
          });
        });
      }
    }

    function openConnInMuxedConn(muxer, cb) {
      cb(muxer.newStream());
    }

    function protocolHandshake(conn, protocol, cb) {
      var ms = new multistream.Dialer();
      ms.handle(conn, function (err) {
        if (err) {
          return callback(err);
        }
        ms.select(protocol, function (err, conn) {
          if (err) {
            return callback(err);
          }
          proxyConn.setInnerConn(conn);
          callback(null, proxyConn);
        });
      });
    }
  };
};